#+AUTHOR: Daniele Santoro
#+TITLE: Assignment 9 - Grocery list Web-Application
#+DATE: 12/01/2016

* Introduction
  - Code and documentation are present at this link: https://github.com/acca/assignment9.
  - Demo available here: http://PUBLIC_IP_ADDRESS:8080/grocery-frontend/
  
  This web application demonstrates a basic utilization of various web architecture technologies in a multi-tier environment, through the common use-case of the management of a grocery list.
** Basic description
   A user of this application can utilize it to manage own grocery lists, specifying for each list a variable number of products. For each product the system stores the product name, the product id, the product cost, the product quantity and if a product has been bought.

** Technologies and environment used
   - Wildfly JBoss application container
   - JNDI Naming resolution
   - Apache Tomcat application server
   - Java Enterprise Edition Bean
   - MySql server
   - Ajax
   - CSS
   - HTML4 and HTML5
   - Java Server Pages (JSP)
   - Java Servlet
   - JPA and ORM using the JBoss Hibernate implementation
   - jQuery JS Framework

** Modules
   The application is compose by two different projects:
   - *grocerylist-backend*: Must be deployed in an application container, like JBoss. It provides core business-logic of the application and the persistence layer.
   - *grocerylist-frontend*: Can be deployed in a different application container or in an application server, like Apache Tomcat. It provides the web based interface to the user.

** Architecture and Class diagram
   - *The architecture diagram*
     [[./diagrams/architecture.png]]
   - *The class diagram*
     [[./diagrams/class-diagram.png]]

* Implementation

  Specific functionality of each class/files are described below, separated by projects:
** Backend
   - *Package* =it.unitn.dsantoro.a9.model=: Contains the Entity Beans: classes used to represent the application model which are automatically created and updated to the persistent layer through ORM.
     - *User.java*
     - *GroceryList.java*
     - *Product.java*
   - *Package* =it.unitn.dsantoro.a9.test=: Classes used as test suite to test the behavior of the various remote methods of the EJB and to test the methods of the entities.
     - *GroceryListServiceTest.java*
     - *GroceryListServiceTest2.java*
     - *GroceryListDBTest.java*
   - *Package* =it.unitn.dsantoro.a9.=: 
     - *GroceryListService.java*:
     - *GroceryListServiceRemote.java*:
   - *persistence.xml*: This file contains two persitence-units, one (mapped to JBoss datasource exposed via JNDI) used to connect the main EJB and the other (mapped directly to the MySql used for development) used to test methods on the DB, since JUnit has problem in accessing the JNDI context.

** Frontend
   - *Controller.java*: A servlet which controls the operations flow and communicates with the southbound remote system. All pages refer to this servlet for every operation on the list using a specific method name in the operation parameter: ~Controller?op=showList~.
   - *ListViewParamFilter.java*: Implements Servlet Filter interface. It is used to control the parameter of the =list.jsp= page. Since this page required few parameter in the request, if they are not set, the filter redirect to the dashboard page.
   - *Message.java*: This class represents a message sent to the user. It stores and print using different CSS classes a message depending on the severity which can be: =INFO, WARNING, ERROR=. All messages for a user session are saved in a queue (LIFO) and showed in the web interface customizing using CSS rules their style.
     
   - *script.js*: Contains the Javascript functions to allow in-place renaming of a product, including the asynchronous update using jQuery and Ajax.

   - *style.css*: Style for the entire web application.
    
   - *index.jsp*: Just a JSP page which redirect the user to the application dashboard.

   - *home.jsp*: Application dashboard showing the lists of the user.
   
* Deployment
  The repository contains two /Maven/ based project developed using Eclipse which can be deployed following the below instructions.

  The grocery-frontend project depends on the grocery-backend artifact, for this reason it must be compiled for second. In addition the application requires a datasource of type MySql named =MySqlA9= and responding on the following JNDI URI: =java:/MySqlA9= on the same application container where the backend will be deployed.

** Deploy & Run
   1) Download the repository using git:
      #+BEGIN_EXAMPLE
      git clone https://github.com/acca/assignment9.git
      #+END_EXAMPLE
   2) Move into the project main folder
      #+BEGIN_EXAMPLE
      cd ./assignment9
      #+END_EXAMPLE
   3) Build the web application
      #+BEGIN_EXAMPLE
      cd grocery-backend
      mvn install
      cd ../grocery-fronted
      mvn install
      #+END_EXAMPLE
   4) Move the generated builds on the proper servers and rename accordingly:
      - =grocery-backend/target/= jar file into your JBoss =deployments= folder and rename as grocery-backend
      - =grocery-frontend/target/= file into your Tomcat =webapps= folder
   5) Have a nice time with AJAX polling update from client to server:
      http://localhost:8080/assignment7

** Screen-shots
   I think that a demo is better than many screen-shots, for this reason I've deployed the application on a public tomcat server available at the following address:

   http://PUBLIC_IP_ADDRESS:8080/grocery-frontend/

   /(IP address will be shared only in the mail to the teacher for security reasons)/

* Comments and Notes
  In respect to the initial plan, some classes has not been implemented due to wrong plan/scheduling of the effort. In particular the functionality related to sharing, revoking and user permission of the list are not yet ready, for this reason the user session persist only in the browser session lifetime.

  Some ideas to enhance the business logic inside the back-end tier are: include /total price calculation, look up of less expansive supermarket using web services/.

  In conclusion I must say that an huge work has been done in modeling the various classes and components, probably the hardest part on the project.
